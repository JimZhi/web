/*
1. 每一个对象都有自己的原型, 被称为隐式原型
{
  age: 18,
  [[prototype]]: object
}
obj.age 会先在自己的对象中查找，未找到则会去自己的隐式原型上查找
obj.__proto__
Object.getPrototypeOf(obj)

========================================================

2. 函数的原型
函数的特殊性在于既可以看成函数 也可以看成对象
所以他既有__proto__隐式原型
作为函数有prototype显示原型

========================================================

3. new 操作符
··3-1. 创建一个空对象
  3-2. this指向该空对象
  3-3. 将构造函数的显示原型赋值给 该空对象的隐式原型
  3-4. 执行函数体
  3-5. 返回新对象

========================================================

4. 原型链继承
5. class类继承

========================================================

6. ES6+
  6.1 class类
  6.2 对象字面量增强
  6.3 数组对象解构
*/
// 6.2 对象字面量增强
let obj = {
  age,
  height,
  foo() {}
}
//6.3 数组对象解构
let [a, b, c] = [1, 2, 3]
let { age, height } = obj